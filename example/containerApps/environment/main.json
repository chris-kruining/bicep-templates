{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.34.60546",
      "templateHash": "8843434758747724257"
    }
  },
  "definitions": {
    "_2.CreateContextParams": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "nameConventionTemplate": {
          "type": "string"
        },
        "deployedAt": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/_5.Location"
        },
        "tenant": {
          "$ref": "#/definitions/_5.Tenant"
        },
        "tags": {
          "$ref": "#/definitions/_5.Tags"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../src/common/context.bicep"
        }
      }
    },
    "_5.Abbreviation": {
      "type": "string",
      "allowedValues": [
        "ag",
        "app",
        "appcs",
        "appi",
        "asp",
        "ca",
        "cae",
        "cr",
        "id",
        "insqr",
        "kv",
        "la",
        "logic",
        "rg",
        "sb",
        "sbq",
        "sbt",
        "sbts",
        "st",
        "stapp"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../src/types.bicep"
        }
      }
    },
    "_5.Location": {
      "type": "string",
      "allowedValues": [
        "australiacentral",
        "australiacentral2",
        "australiaeast",
        "australiasoutheast",
        "brazilsouth",
        "brazilsoutheast",
        "brazilus",
        "canadacentral",
        "canadaeast",
        "centralindia",
        "centralus",
        "centraluseuap",
        "eastasia",
        "eastus",
        "eastus2",
        "eastus2euap",
        "eastusstg",
        "francecentral",
        "francesouth",
        "germanynorth",
        "germanywestcentral",
        "israelcentral",
        "italynorth",
        "japaneast",
        "japanwest",
        "jioindiacentral",
        "jioindiawest",
        "koreacentral",
        "koreasouth",
        "mexicocentral",
        "northcentralus",
        "northeurope",
        "norwayeast",
        "norwaywest",
        "polandcentral",
        "qatarcentral",
        "southafricanorth",
        "southafricawest",
        "southcentralus",
        "southcentralusstg",
        "southeastasia",
        "southindia",
        "spaincentral",
        "swedencentral",
        "switzerlandnorth",
        "switzerlandwest",
        "uaecentral",
        "uaenorth",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westeurope",
        "westindia",
        "westus",
        "westus2",
        "westus3"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../src/types.bicep"
        }
      }
    },
    "_5.Options": {
      "type": "array",
      "items": {
        "type": "object"
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../src/types.bicep"
        }
      }
    },
    "_5.ResourceType": {
      "type": "string",
      "allowedValues": [
        "actionGroup",
        "appConfiguration",
        "appService",
        "appServicePlan",
        "applicationInsights",
        "containerApp",
        "containerAppEnvironment",
        "containerRegistry",
        "keyVault",
        "logAnalytics",
        "managedIdentity",
        "resourceGroup",
        "serviceBus",
        "serviceBusQueue",
        "serviceBusTopic",
        "serviceBusTopicSubscription",
        "sheduledQueryRules",
        "staticWebApp",
        "storageAccount",
        "workflow"
      ],
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../src/types.bicep"
        }
      }
    },
    "_5.Tags": {
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "type": "string"
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../src/types.bicep"
        }
      }
    },
    "_5.Tenant": {
      "type": "object",
      "properties": {
        "countryCode": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      },
      "metadata": {
        "description": "this is bicep's own tenant, there just isn't a type for it",
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../src/types.bicep"
        }
      }
    },
    "Context": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "nameConventionTemplate": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/_5.Location"
        },
        "tenant": {
          "$ref": "#/definitions/_5.Tenant"
        },
        "tags": {
          "$ref": "#/definitions/_5.Tags"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../src/types.bicep"
        }
      }
    }
  },
  "functions": [
    {
      "namespace": "__bicep",
      "members": {
        "create_context": {
          "parameters": [
            {
              "$ref": "#/definitions/_2.CreateContextParams",
              "name": "params"
            }
          ],
          "output": {
            "$ref": "#/definitions/Context",
            "value": {
              "project": "[parameters('params').project]",
              "nameConventionTemplate": "[parameters('params').nameConventionTemplate]",
              "environment": "[parameters('params').environment]",
              "location": "[parameters('params').location]",
              "tenant": "[parameters('params').tenant]",
              "tags": "[shallowMerge(createArray(createObject('project', parameters('params').project, 'deployedAt', parameters('params').deployedAt, 'environment', parameters('params').environment, 'location', parameters('params').location, 'deploymentMethod', 'Bicep'), parameters('params').tags))]"
            }
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "../../../src/common/context.bicep"
            }
          }
        },
        "resource_group": {
          "parameters": [
            {
              "$ref": "#/definitions/Context",
              "name": "context"
            },
            {
              "$ref": "#/definitions/_5.Options",
              "name": "options"
            }
          ],
          "output": {
            "type": "object",
            "value": "[_1.resource_group(parameters('context'), parameters('options'))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "../../../src/recommended/resources/resource-group.bicep"
            }
          }
        }
      }
    },
    {
      "namespace": "_3",
      "members": {
        "create_name": {
          "parameters": [
            {
              "type": "object",
              "name": "context"
            },
            {
              "type": "string",
              "name": "template"
            }
          ],
          "output": {
            "type": "string",
            "value": "[toLower(reduce(items(parameters('context')), parameters('template'), lambda('t', 'e', replace(string(lambdaVariables('t')), format('${0}', lambdaVariables('e').key), lambdaVariables('e').value))))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "../../../src/internal/name.bicep"
            }
          }
        },
        "to_location_abbreviation": {
          "parameters": [
            {
              "$ref": "#/definitions/_5.Location",
              "name": "location"
            }
          ],
          "output": {
            "type": "string",
            "value": "[createObject('southafricanorth', 'san', 'southafricawest', 'saw', 'australiacentral', 'auc', 'australiacentral2', 'auc2', 'australiaeast', 'aue', 'australiasoutheast', 'ause', 'centralindia', '', 'eastasia', '', 'japaneast', 'jpe', 'japanwest', 'jpw', 'jioindiacentral', '', 'jioindiawest', '', 'koreacentral', 'krc', 'koreasouth', 'krs', 'southindia', '', 'southeastasia', '', 'westindia', '', 'canadacentral', 'cac', 'canadaeast', 'cae', 'francecentral', 'frc', 'francesouth', 'frs', 'germanynorth', 'den', 'germanywestcentral', 'dewc', 'italynorth', 'itn', 'northeurope', 'eun', 'norwayeast', 'noe', 'norwaywest', 'now', 'polandcentral', 'poc', 'spaincentral', 'spc', 'swedencentral', 'swc', 'switzerlandnorth', 'szn', 'switzerlandwest', 'szw', 'uksouth', 'uks', 'ukwest', 'ukw', 'westeurope', 'euw', 'mexicocentral', 'mxc', 'israelcentral', '', 'qatarcentral', 'qtc', 'uaecentral', '', 'uaenorth', '', 'brazilsouth', 'brs', 'brazilsoutheast', 'brse', 'brazilus', '', 'centralus', 'usc', 'centraluseuap', '', 'eastus', 'use', 'eastus2', 'use2', 'eastus2euap', '', 'eastusstg', '', 'northcentralus', 'usnc', 'southcentralus', 'ussc', 'southcentralusstg', '', 'westcentralus', 'uswc', 'westus', 'usw', 'westus2', 'usw2', 'westus3', 'usw3')[parameters('location')]]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "../../../src/internal/name.bicep"
            }
          }
        },
        "to_resource_abbreviation": {
          "parameters": [
            {
              "$ref": "#/definitions/_5.ResourceType",
              "name": "resourceType"
            }
          ],
          "output": {
            "$ref": "#/definitions/_5.Abbreviation",
            "value": "[createObject('resourceGroup', 'rg', 'containerApp', 'ca', 'containerAppEnvironment', 'cae', 'keyVault', 'kv', 'managedIdentity', 'id', 'staticWebApp', 'stapp', 'appService', 'app', 'appServicePlan', 'asp', 'containerRegistry', 'cr', 'appConfiguration', 'appcs', 'serviceBus', 'sb', 'serviceBusQueue', 'sbq', 'serviceBusTopic', 'sbt', 'serviceBusTopicSubscription', 'sbts', 'applicationInsights', 'appi', 'storageAccount', 'st', 'logAnalytics', 'la', 'actionGroup', 'ag', 'sheduledQueryRules', 'insqr', 'workflow', 'logic')[parameters('resourceType')]]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "../../../src/internal/name.bicep"
            }
          }
        }
      }
    },
    {
      "namespace": "_4",
      "members": {
        "create_resource": {
          "parameters": [
            {
              "$ref": "#/definitions/Context",
              "name": "context"
            },
            {
              "$ref": "#/definitions/_5.ResourceType",
              "name": "resourceType"
            },
            {
              "type": "array",
              "items": {
                "type": "object"
              },
              "name": "options"
            }
          ],
          "output": {
            "type": "object",
            "value": "[reduce(parameters('options'), createObject('name', _3.create_name(createObject('environment', parameters('context').environment, 'location', _3.to_location_abbreviation(parameters('context').location), 'type', _3.to_resource_abbreviation(parameters('resourceType')), 'project', parameters('context').project), parameters('context').nameConventionTemplate), 'location', parameters('context').location, 'tags', parameters('context').tags, 'properties', createObject()), lambda('obj', 'next', union(lambdaVariables('obj'), lambdaVariables('next'))))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "../../../src/internal/resource.bicep"
            }
          }
        }
      }
    },
    {
      "namespace": "_1",
      "members": {
        "resource_group": {
          "parameters": [
            {
              "$ref": "#/definitions/Context",
              "name": "context"
            },
            {
              "$ref": "#/definitions/_5.Options",
              "name": "options"
            }
          ],
          "output": {
            "type": "object",
            "value": "[_4.create_resource(parameters('context'), 'resourceGroup', parameters('options'))]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "../../../src/base/resources/resource-group.bicep"
            }
          }
        }
      }
    }
  ],
  "parameters": {
    "deployedAt": {
      "type": "string"
    },
    "environment": {
      "type": "string"
    }
  },
  "variables": {
    "context": "[__bicep.create_context(createObject('project', 'projectName', 'nameConventionTemplate', '$type-$environment-$location-$project', 'environment', parameters('environment'), 'location', 'westeurope', 'deployedAt', parameters('deployedAt'), 'tenant', tenant(), 'tags', createObject()))]",
    "resourceGroupConfig": "[__bicep.resource_group(variables('context'), createArray())]"
  },
  "resources": {
    "group": {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2024-07-01",
      "name": "[variables('resourceGroupConfig').name]",
      "location": "[variables('resourceGroupConfig').location]",
      "tags": "[variables('resourceGroupConfig').tags]",
      "properties": "[variables('resourceGroupConfig').properties]"
    },
    "alertLogicApp": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "alertLogicApp",
      "resourceGroup": "[variables('resourceGroupConfig').name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "context": {
            "value": "[variables('context')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "15338670774626943615"
            }
          },
          "definitions": {
            "_1.FlowAccessControlConfiguration": {
              "type": "object",
              "properties": {
                "actions": {
                  "$ref": "#/definitions/_1.FlowAccessControlConfigurationPolicy",
                  "nullable": true,
                  "metadata": {
                    "description": "The access control configuration for workflow actions."
                  }
                },
                "contents": {
                  "$ref": "#/definitions/_1.FlowAccessControlConfigurationPolicy",
                  "nullable": true,
                  "metadata": {
                    "description": "The access control configuration for accessing workflow run contents."
                  }
                },
                "triggers": {
                  "$ref": "#/definitions/_1.FlowAccessControlConfigurationPolicy",
                  "nullable": true,
                  "metadata": {
                    "description": "The access control configuration for invoking workflow triggers."
                  }
                },
                "workflowManagement": {
                  "$ref": "#/definitions/_1.FlowAccessControlConfigurationPolicy",
                  "nullable": true,
                  "metadata": {
                    "description": "The access control configuration for workflow management."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_1.FlowAccessControlConfigurationPolicy": {
              "type": "object",
              "properties": {
                "allowedCallerIpAddresses": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.IpAddressRange"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "The allowed caller IP address ranges."
                  }
                },
                "openAuthenticationPolicies": {
                  "$ref": "#/definitions/_1.OpenAuthenticationAccessPolicies",
                  "nullable": true,
                  "metadata": {
                    "description": "The authentication policies for workflow."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_1.FlowEndpoints": {
              "type": "object",
              "properties": {
                "accessEndpointIpAddresses": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.IpAddress"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "The access endpoint ip address."
                  }
                },
                "outgoingIpAddresses": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.IpAddress"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "The outgoing ip address."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_1.FlowEndpointsConfiguration": {
              "type": "object",
              "properties": {
                "connector": {
                  "$ref": "#/definitions/_1.FlowEndpoints",
                  "nullable": true,
                  "metadata": {
                    "description": "The connector endpoints."
                  }
                },
                "workflow": {
                  "$ref": "#/definitions/_1.FlowEndpoints",
                  "nullable": true,
                  "metadata": {
                    "description": "The workflow endpoints."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_1.IpAddress": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The address."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_1.IpAddressRange": {
              "type": "object",
              "properties": {
                "addressRange": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The IP address range."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_1.OpenAuthenticationAccessPolicies": {
              "type": "object",
              "properties": {
                "policies": {
                  "$ref": "#/definitions/_1.OpenAuthenticationAccessPolicies",
                  "nullable": true,
                  "metadata": {
                    "description": "Open authentication policies."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_1.ResourceReference": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The resource id."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_1.WorkflowProperties": {
              "type": "object",
              "properties": {
                "accessControl": {
                  "$ref": "#/definitions/_1.FlowAccessControlConfiguration",
                  "nullable": true,
                  "metadata": {
                    "description": "The access control configuration."
                  }
                },
                "definition": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "The definition. See [Schema reference for Workflow Definition Language in Azure Logic Apps](https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-workflow-definition-language)."
                  }
                },
                "endpointsConfiguration": {
                  "$ref": "#/definitions/_1.FlowEndpointsConfiguration",
                  "nullable": true,
                  "metadata": {
                    "description": "The endpoints configuration."
                  }
                },
                "integrationAccount": {
                  "$ref": "#/definitions/_1.ResourceReference",
                  "nullable": true,
                  "metadata": {
                    "description": "The integration account."
                  }
                },
                "integrationServiceEnvironment": {
                  "$ref": "#/definitions/_1.ResourceReference",
                  "nullable": true,
                  "metadata": {
                    "description": "The integration service environment."
                  }
                },
                "parameters": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "The parameters."
                  }
                },
                "state": {
                  "type": "string",
                  "allowedValues": [
                    "Completed",
                    "Deleted",
                    "Disabled",
                    "Enabled",
                    "NotSpecified",
                    "Suspended"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "The state."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                }
              }
            },
            "_4.Abbreviation": {
              "type": "string",
              "allowedValues": [
                "ag",
                "app",
                "appcs",
                "appi",
                "asp",
                "ca",
                "cae",
                "cr",
                "id",
                "insqr",
                "kv",
                "la",
                "logic",
                "rg",
                "sb",
                "sbq",
                "sbt",
                "sbts",
                "st",
                "stapp"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_4.Location": {
              "type": "string",
              "allowedValues": [
                "australiacentral",
                "australiacentral2",
                "australiaeast",
                "australiasoutheast",
                "brazilsouth",
                "brazilsoutheast",
                "brazilus",
                "canadacentral",
                "canadaeast",
                "centralindia",
                "centralus",
                "centraluseuap",
                "eastasia",
                "eastus",
                "eastus2",
                "eastus2euap",
                "eastusstg",
                "francecentral",
                "francesouth",
                "germanynorth",
                "germanywestcentral",
                "israelcentral",
                "italynorth",
                "japaneast",
                "japanwest",
                "jioindiacentral",
                "jioindiawest",
                "koreacentral",
                "koreasouth",
                "mexicocentral",
                "northcentralus",
                "northeurope",
                "norwayeast",
                "norwaywest",
                "polandcentral",
                "qatarcentral",
                "southafricanorth",
                "southafricawest",
                "southcentralus",
                "southcentralusstg",
                "southeastasia",
                "southindia",
                "spaincentral",
                "swedencentral",
                "switzerlandnorth",
                "switzerlandwest",
                "uaecentral",
                "uaenorth",
                "uksouth",
                "ukwest",
                "westcentralus",
                "westeurope",
                "westindia",
                "westus",
                "westus2",
                "westus3"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_4.Options": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_4.ResourceType": {
              "type": "string",
              "allowedValues": [
                "actionGroup",
                "appConfiguration",
                "appService",
                "appServicePlan",
                "applicationInsights",
                "containerApp",
                "containerAppEnvironment",
                "containerRegistry",
                "keyVault",
                "logAnalytics",
                "managedIdentity",
                "resourceGroup",
                "serviceBus",
                "serviceBusQueue",
                "serviceBusTopic",
                "serviceBusTopicSubscription",
                "sheduledQueryRules",
                "staticWebApp",
                "storageAccount",
                "workflow"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_4.Tags": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "string"
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_4.Tenant": {
              "type": "object",
              "properties": {
                "countryCode": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "tenantId": {
                  "type": "string"
                }
              },
              "metadata": {
                "description": "this is bicep's own tenant, there just isn't a type for it",
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "Context": {
              "type": "object",
              "properties": {
                "project": {
                  "type": "string"
                },
                "nameConventionTemplate": {
                  "type": "string"
                },
                "environment": {
                  "type": "string"
                },
                "location": {
                  "$ref": "#/definitions/_4.Location"
                },
                "tenant": {
                  "$ref": "#/definitions/_4.Tenant"
                },
                "tags": {
                  "$ref": "#/definitions/_4.Tags"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "_2",
              "members": {
                "create_name": {
                  "parameters": [
                    {
                      "type": "object",
                      "name": "context"
                    },
                    {
                      "type": "string",
                      "name": "template"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[toLower(reduce(items(parameters('context')), parameters('template'), lambda('t', 'e', replace(string(lambdaVariables('t')), format('${0}', lambdaVariables('e').key), lambdaVariables('e').value))))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                },
                "to_location_abbreviation": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_4.Location",
                      "name": "location"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[createObject('southafricanorth', 'san', 'southafricawest', 'saw', 'australiacentral', 'auc', 'australiacentral2', 'auc2', 'australiaeast', 'aue', 'australiasoutheast', 'ause', 'centralindia', '', 'eastasia', '', 'japaneast', 'jpe', 'japanwest', 'jpw', 'jioindiacentral', '', 'jioindiawest', '', 'koreacentral', 'krc', 'koreasouth', 'krs', 'southindia', '', 'southeastasia', '', 'westindia', '', 'canadacentral', 'cac', 'canadaeast', 'cae', 'francecentral', 'frc', 'francesouth', 'frs', 'germanynorth', 'den', 'germanywestcentral', 'dewc', 'italynorth', 'itn', 'northeurope', 'eun', 'norwayeast', 'noe', 'norwaywest', 'now', 'polandcentral', 'poc', 'spaincentral', 'spc', 'swedencentral', 'swc', 'switzerlandnorth', 'szn', 'switzerlandwest', 'szw', 'uksouth', 'uks', 'ukwest', 'ukw', 'westeurope', 'euw', 'mexicocentral', 'mxc', 'israelcentral', '', 'qatarcentral', 'qtc', 'uaecentral', '', 'uaenorth', '', 'brazilsouth', 'brs', 'brazilsoutheast', 'brse', 'brazilus', '', 'centralus', 'usc', 'centraluseuap', '', 'eastus', 'use', 'eastus2', 'use2', 'eastus2euap', '', 'eastusstg', '', 'northcentralus', 'usnc', 'southcentralus', 'ussc', 'southcentralusstg', '', 'westcentralus', 'uswc', 'westus', 'usw', 'westus2', 'usw2', 'westus3', 'usw3')[parameters('location')]]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                },
                "to_resource_abbreviation": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_4.ResourceType",
                      "name": "resourceType"
                    }
                  ],
                  "output": {
                    "$ref": "#/definitions/_4.Abbreviation",
                    "value": "[createObject('resourceGroup', 'rg', 'containerApp', 'ca', 'containerAppEnvironment', 'cae', 'keyVault', 'kv', 'managedIdentity', 'id', 'staticWebApp', 'stapp', 'appService', 'app', 'appServicePlan', 'asp', 'containerRegistry', 'cr', 'appConfiguration', 'appcs', 'serviceBus', 'sb', 'serviceBusQueue', 'sbq', 'serviceBusTopic', 'sbt', 'serviceBusTopicSubscription', 'sbts', 'applicationInsights', 'appi', 'storageAccount', 'st', 'logAnalytics', 'la', 'actionGroup', 'ag', 'sheduledQueryRules', 'insqr', 'workflow', 'logic')[parameters('resourceType')]]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_3",
              "members": {
                "create_resource": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_4.ResourceType",
                      "name": "resourceType"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[reduce(parameters('options'), createObject('name', _2.create_name(createObject('environment', parameters('context').environment, 'location', _2.to_location_abbreviation(parameters('context').location), 'type', _2.to_resource_abbreviation(parameters('resourceType')), 'project', parameters('context').project), parameters('context').nameConventionTemplate), 'location', parameters('context').location, 'tags', parameters('context').tags, 'properties', createObject()), lambda('obj', 'next', union(lambdaVariables('obj'), lambdaVariables('next'))))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/resource.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "__bicep",
              "members": {
                "with_managed_identity": {
                  "parameters": [],
                  "output": {
                    "type": "object",
                    "value": {
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    }
                  },
                  "metadata": {
                    "description": "Apply system assigned managed identity to the current config\n---\n\n```bicep{2,10,17}\nimport { Context } from 'br/Tricep:types:latest'\nimport { with_managed_identity } from 'br/Tricep:common/identity:latest'\nimport { workflow } from 'br/Tricep:recommended/logic/workflow:latest'\n\ntargetScope = 'resourceGroup'\n\nparam context Context\n\nvar workflowConfig = workflow(context, [\n  with_managed_identity()\n])\n\nresource sendMessageOverTeamsAndSlack 'Microsoft.Logic/workflows@2019-05-01' = {\n  name: workflowConfig.name\n  location: workflowConfig.location\n  tags: workflowConfig.tags\n  identity: workflowConfig.identity\n  properties: workflowConfig.properties\n}\n```\n",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/common/identity.bicep"
                    }
                  }
                },
                "workflow": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "object",
                      "name": "definition"
                    },
                    {
                      "$ref": "#/definitions/_4.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_1.workflow(parameters('context'), parameters('definition'), parameters('options'))]"
                  },
                  "metadata": {
                    "description": "## Define a [logic app workflow](https://learn.microsoft.com/en-us/azure/templates/microsoft.logic/workflows) resource\n\n**Example**\n```bicep\nimport { Context } from 'br/Tricep:types:latest'\nimport { workflow } from 'br/Tricep:recommended/logic/workflow:latest'\n\nparam context Context\n\nvar workflowConfig = workflow(context, []);\n\nresource someWorkflowResource 'Microsoft.Logic/workflows@2019-05-01' = {\n  name: workflowConfig.name\n  location: workflowConfig.location\n  tags: workflowConfig.tags\n  identity: workflowConfig.identity\n  properties: workflowConfig.properties\n}\n```\n",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/logic/workflow.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_1",
              "members": {
                "workflow": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "object",
                      "name": "definition"
                    },
                    {
                      "$ref": "#/definitions/_4.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_3.create_resource(parameters('context'), 'workflow', union(createArray(createObject('properties', createObject('definition', parameters('definition')))), parameters('options')))]"
                  },
                  "metadata": {
                    "description": "define a [logic app workflow](https://learn.microsoft.com/en-us/azure/templates/microsoft.logic/workflows) resource",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/logic/workflow.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "context": {
              "$ref": "#/definitions/Context"
            }
          },
          "variables": {
            "$fxv#0": {
              "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
              "actions": {
                "Initialize_variable": {
                  "type": "InitializeVariable",
                  "inputs": {
                    "variables": [
                      {
                        "name": "AffectedResource",
                        "type": "array",
                        "value": "@split(triggerBody()?['data']?['essentials']?['alertTargetIDs'][0], '/')"
                      }
                    ]
                  },
                  "runAfter": {}
                },
                "Read_a_resource": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "referenceName": "arm"
                      }
                    },
                    "method": "get",
                    "path": "/subscriptions/@{encodeURIComponent(variables('AffectedResource')[2])}/resourcegroups/@{encodeURIComponent(variables('AffectedResource')[4])}/providers/@{encodeURIComponent(variables('AffectedResource')[6])}/@{encodeURIComponent(concat(variables('AffectedResource')[7], '/', variables('AffectedResource')[8]))}",
                    "queries": {
                      "x-ms-api-version": "@outputs('Api_version')"
                    }
                  },
                  "runAfter": {
                    "Api_version": [
                      "SUCCEEDED"
                    ]
                  },
                  "runtimeConfiguration": {
                    "staticResult": {
                      "name": "Read_a_resource0",
                      "staticResultOptions": "Disabled"
                    }
                  }
                },
                "Post_message_in_a_chat_or_channel": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "referenceName": "teams"
                      }
                    },
                    "method": "post",
                    "body": {
                      "recipient": "19:25911fc0109a40a99a7a481bf47e0b3f@thread.v2",
                      "messageBody": "<p class=\"editor-paragraph\">Alert: @{triggerBody()?['data']?['essentials']?['alertRule']}, with severity: @{triggerBody()?['data']?['essentials']?['severity']}, was fired at @{triggerBody()?['data']?['essentials']?['firedDateTime']}</p><br><p class=\"editor-paragraph\">Monitoring service: @{triggerBody()?['data']?['essentials']?['monitoringService']}</p><p class=\"editor-paragraph\">Condition: @{triggerBody()?['data']?['essentials']?['monitorCondition']}</p><p class=\"editor-paragraph\">Type: @{triggerBody()?['data']?['essentials']?['signalType']}</p><p class=\"editor-paragraph\">Alert ID: @{triggerBody()?['data']?['essentials']?['alertId']}</p>"
                    },
                    "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Group chat')}"
                  },
                  "runAfter": {
                    "Read_a_resource": [
                      "SUCCEEDED"
                    ]
                  }
                },
                "Post_message_(V2)": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "referenceName": "slack-1"
                      }
                    },
                    "method": "post",
                    "body": {
                      "channel": "C07VDDCU2FJ",
                      "text": "Alert: @{triggerBody()?['data']?['essentials']?['alertRule']}, with severity: @{triggerBody()?['data']?['essentials']?['severity']}, was fired at @{triggerBody()?['data']?['essentials']?['firedDateTime']}\n\nMonitoring service: @{triggerBody()?['data']?['essentials']?['monitoringService']}\nCondition: @{triggerBody()?['data']?['essentials']?['monitorCondition']}\nType: @{triggerBody()?['data']?['essentials']?['signalType']}\nAlert ID: @{triggerBody()?['data']?['essentials']?['alertId']}",
                      "username": "Azure alerts"
                    },
                    "path": "/v2/chat.postMessage"
                  },
                  "runAfter": {
                    "Read_a_resource": [
                      "SUCCEEDED"
                    ]
                  }
                },
                "Read_resource_provider": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "referenceName": "arm"
                      }
                    },
                    "method": "get",
                    "path": "/subscriptions/@{encodeURIComponent(variables('AffectedResource')[2])}/providers/@{encodeURIComponent(variables('AffectedResource')[6])}",
                    "queries": {
                      "x-ms-api-version": "2016-06-01"
                    }
                  },
                  "runAfter": {
                    "Initialize_variable": [
                      "SUCCEEDED"
                    ]
                  }
                },
                "Api_version": {
                  "type": "JavaScriptCode",
                  "inputs": {
                    "code": "try {\r\n    const providers = workflowContext.actions.Read_resource_provider.outputs.body.resourceTypes;\r\n    const affectedResource = workflowContext.actions.Initialize_variable.inputs.variables[0].value;\r\n    const givenResourceType = affectedResource[7];\r\n    // const givenResourceType = `${affectedResource[7]}/${affectedResource[8]}`;\r\n\r\n    const provider = providers.find(\r\n        ({ resourceType }) => resourceType === givenResourceType\r\n    );\r\n\r\n    return provider\r\n        ? provider.apiVersions.at(0)\r\n        : JSON.stringify(providers);\r\n}\r\ncatch(e) {\r\n    return `an error occurred: ${e.message}`;\r\n}"
                  },
                  "runAfter": {
                    "Read_resource_provider": [
                      "SUCCEEDED"
                    ]
                  }
                }
              },
              "contentVersion": "1.0.0.0",
              "outputs": {},
              "triggers": {
                "When_a_HTTP_request_is_received": {
                  "type": "Request",
                  "kind": "Http",
                  "inputs": {
                    "method": "POST",
                    "schema": {
                      "type": "object",
                      "properties": {
                        "schemaId": {
                          "type": "string"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "essentials": {
                              "type": "object",
                              "properties": {
                                "alertId": {
                                  "type": "string"
                                },
                                "alertRule": {
                                  "type": "string"
                                },
                                "severity": {
                                  "type": "string"
                                },
                                "signalType": {
                                  "type": "string"
                                },
                                "monitorCondition": {
                                  "type": "string"
                                },
                                "monitoringService": {
                                  "type": "string"
                                },
                                "alertTargetIDs": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "originAlertId": {
                                  "type": "string"
                                },
                                "firedDateTime": {
                                  "type": "string"
                                },
                                "resolvedDateTime": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "essentialsVersion": {
                                  "type": "string"
                                },
                                "alertContextVersion": {
                                  "type": "string"
                                }
                              }
                            },
                            "alertContext": {
                              "type": "object",
                              "properties": {}
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "staticResults": {
                "Read_a_resource0": {
                  "status": "Succeeded",
                  "outputs": {
                    "statusCode": "OK"
                  }
                }
              }
            },
            "workflowConfig": "[__bicep.workflow(parameters('context'), variables('$fxv#0'), createArray(__bicep.with_managed_identity()))]"
          },
          "resources": {
            "logicApp": {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[variables('workflowConfig').name]",
              "location": "[variables('workflowConfig').location]",
              "tags": "[variables('workflowConfig').tags]",
              "identity": "[variables('workflowConfig').identity]",
              "properties": "[variables('workflowConfig').properties]"
            }
          },
          "outputs": {
            "logicApp": {
              "type": "string",
              "metadata": {
                "resourceType": "Microsoft.Logic/workflows@2019-05-01"
              },
              "value": "[resourceId('Microsoft.Logic/workflows', variables('workflowConfig').name)]"
            }
          }
        }
      },
      "dependsOn": [
        "group"
      ]
    },
    "monitoring": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "monitoring",
      "resourceGroup": "[variables('resourceGroupConfig').name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "context": {
            "value": "[variables('context')]"
          },
          "alertLogicApp": {
            "value": "[reference('alertLogicApp').outputs.logicApp.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "12417564810613775518"
            }
          },
          "definitions": {
            "_2.ApplicationInsightsComponentProperties": {
              "type": "object",
              "properties": {
                "Application_Type": {
                  "type": "string",
                  "allowedValues": [
                    "other",
                    "web"
                  ],
                  "metadata": {
                    "description": "Type of application being monitored."
                  }
                },
                "DisableIpMasking": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Disable IP masking."
                  }
                },
                "DisableLocalAuth": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Disable Non-AAD based Auth."
                  }
                },
                "Flow_Type": {
                  "type": "string",
                  "allowedValues": [
                    "Bluefield"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API."
                  }
                },
                "ForceCustomerStorageForProfiler": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Force users to create their own storage account for profiler and debugger."
                  }
                },
                "HockeyAppId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp."
                  }
                },
                "ImmediatePurgeDataOn30Days": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Purge data immediately after 30 days."
                  }
                },
                "IngestionMode": {
                  "type": "string",
                  "allowedValues": [
                    "ApplicationInsights",
                    "ApplicationInsightsWithDiagnosticSettings",
                    "LogAnalytics"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Indicates the flow of the ingestion."
                  }
                },
                "publicNetworkAccessForIngestion": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "The network access type for accessing Application Insights ingestion."
                  }
                },
                "publicNetworkAccessForQuery": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "The network access type for accessing Application Insights query."
                  }
                },
                "Request_Source": {
                  "type": "string",
                  "allowedValues": [
                    "rest"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'."
                  }
                },
                "RetentionInDays": {
                  "type": "int",
                  "metadata": {
                    "description": "Retention period in days."
                  }
                },
                "SamplingPercentage": {
                  "type": "string",
                  "metadata": {
                    "description": "Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry. To specify a decimal value, use the json() function."
                  }
                },
                "WorkspaceResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Resource Id of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/app-insights.bicep"
                }
              }
            },
            "_3.Actions": {
              "type": "object",
              "properties": {
                "actionGroups": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Action Group resource Ids to invoke when the alert fires."
                  }
                },
                "actionProperties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "The properties of an action properties."
                  }
                },
                "customProperties": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "The properties of an alert payload."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.Condition": {
              "type": "object",
              "properties": {
                "dimensions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_3.Dimension"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "List of Dimensions conditions."
                  }
                },
                "failingPeriods": {
                  "$ref": "#/definitions/_3.ConditionFailingPeriods",
                  "nullable": true,
                  "metadata": {
                    "description": "The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert."
                  }
                },
                "metricMeasureColumn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The column containing the metric measure number. Relevant only for rules of the kind LogAlert."
                  }
                },
                "metricName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric."
                  }
                },
                "operator": {
                  "type": "string",
                  "allowedValues": [
                    "Equals",
                    "GreaterThan",
                    "GreaterThanOrEqual",
                    "LessThan",
                    "LessThanOrEqual"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "The criteria operator. Relevant and required only for rules of the kind LogAlert."
                  }
                },
                "query": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Log query alert."
                  }
                },
                "resourceIdColumn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert."
                  }
                },
                "threshold": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "the criteria threshold value that activates the alert. Relevant and required only for rules of the kind LogAlert."
                  }
                },
                "timeAggregation": {
                  "type": "string",
                  "allowedValues": [
                    "Average",
                    "Count",
                    "Maximum",
                    "Minimum",
                    "Total"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Aggregation type. Relevant and required only for rules of the kind LogAlert."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.ConditionFailingPeriods": {
              "type": "object",
              "properties": {
                "minFailingPeriodsToAlert": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1."
                  }
                },
                "numberOfEvaluationPeriods": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.Dimension": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Name of the dimension."
                  }
                },
                "operator": {
                  "type": "string",
                  "allowedValues": [
                    "Exclude",
                    "Include"
                  ],
                  "metadata": {
                    "description": "Operator for dimension values."
                  }
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "List of dimension values."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.Kind": {
              "type": "string",
              "allowedValues": [
                "LogAlert",
                "LogToMetric"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.LogAlertProperties": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "LogAlert"
                  ]
                },
                "actions": {
                  "$ref": "#/definitions/_3.Actions",
                  "nullable": true,
                  "metadata": {
                    "description": "Actions to invoke when the alert fires."
                  }
                },
                "autoMitigate": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "The flag that indicates whether the alert should be automatically resolved or not. The default is true."
                  }
                },
                "checkWorkspaceAlertsStorageConfigured": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false."
                  }
                },
                "criteria": {
                  "$ref": "#/definitions/_3.ScheduledQueryRuleCriteria",
                  "nullable": true,
                  "metadata": {
                    "description": "The rule criteria that defines the conditions of the scheduled query rule."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The description of the scheduled query rule."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The display name of the alert rule."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "The flag which indicates whether this scheduled query rule is enabled. Value should be true or false."
                  }
                },
                "evaluationFrequency": {
                  "type": "string",
                  "metadata": {
                    "description": "How often the scheduled query rule is evaluated represented in ISO 8601 duration format."
                  }
                },
                "muteActionsDuration": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired."
                  }
                },
                "overrideQueryTimeRange": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods)."
                  }
                },
                "ruleResolveConfiguration": {
                  "$ref": "#/definitions/_3.RuleResolveConfiguration",
                  "nullable": true,
                  "metadata": {
                    "description": "Defines the configuration for resolving fired alerts."
                  }
                },
                "scopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "The list of resource id's that this scheduled query rule is scoped to."
                  }
                },
                "severity": {
                  "type": "int",
                  "allowedValues": [
                    0,
                    1,
                    2,
                    3,
                    4
                  ],
                  "metadata": {
                    "description": "Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest."
                  }
                },
                "skipQueryValidation": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "The flag which indicates whether the provided query should be validated or not. The default is false."
                  }
                },
                "targetResourceTypes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria."
                  }
                },
                "windowSize": {
                  "type": "string",
                  "metadata": {
                    "description": "The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size)."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.LogToMetricProperties": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "LogToMetric"
                  ]
                },
                "actions": {
                  "$ref": "#/definitions/_3.Actions",
                  "nullable": true,
                  "metadata": {
                    "description": "Actions to invoke when the alert fires."
                  }
                },
                "criteria": {
                  "$ref": "#/definitions/_3.ScheduledQueryRuleCriteria",
                  "nullable": true,
                  "metadata": {
                    "description": "The rule criteria that defines the conditions of the scheduled query rule."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The description of the scheduled query rule."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The display name of the alert rule."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "The flag which indicates whether this scheduled query rule is enabled. Value should be true or false."
                  }
                },
                "scopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "The list of resource id's that this scheduled query rule is scoped to."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.Properties": {
              "type": "object",
              "discriminator": {
                "propertyName": "kind",
                "mapping": {
                  "LogAlert": {
                    "$ref": "#/definitions/_3.LogAlertProperties"
                  },
                  "LogToMetric": {
                    "$ref": "#/definitions/_3.LogToMetricProperties"
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.RuleResolveConfiguration": {
              "type": "object",
              "properties": {
                "autoResolved": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "The flag that indicates whether or not to auto resolve a fired alert."
                  }
                },
                "timeToResolve": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.ScheduledQueryRuleCriteria": {
              "type": "object",
              "properties": {
                "allOf": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_3.Condition"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "A list of conditions to evaluate against the specified scopes."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_3.ScheduledQueryRuleProperties": {
              "type": "object",
              "properties": {},
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_4.Sku": {
              "type": "string",
              "allowedValues": [
                "PerGB2018"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/operational-insights/log-analytics.bicep"
                }
              }
            },
            "_7.ReceiverType": {
              "type": "string",
              "allowedValues": [
                "armRole",
                "automationRunbook",
                "azureAppPush",
                "azureFunction",
                "email",
                "eventHub",
                "itsm",
                "logicApp",
                "sms",
                "voice",
                "webhook"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/recommended/insights/action-group.bicep"
                }
              }
            },
            "_8.LogAlertProperties": {
              "type": "object",
              "properties": {
                "checkWorkspaceAlertsStorageConfigured": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/checkWorkspaceAlertsStorageConfigured"
                },
                "description": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/description"
                },
                "displayName": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/displayName"
                },
                "evaluationFrequency": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/evaluationFrequency"
                },
                "muteActionsDuration": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/muteActionsDuration"
                },
                "overrideQueryTimeRange": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/overrideQueryTimeRange"
                },
                "ruleResolveConfiguration": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/ruleResolveConfiguration"
                },
                "scopes": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/scopes"
                },
                "severity": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/severity"
                },
                "skipQueryValidation": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/skipQueryValidation"
                },
                "targetResourceTypes": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/targetResourceTypes"
                },
                "windowSize": {
                  "$ref": "#/definitions/_3.LogAlertProperties/properties/windowSize"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/recommended/insights/sheduled-query-rules.bicep"
                }
              }
            },
            "_9.Abbreviation": {
              "type": "string",
              "allowedValues": [
                "ag",
                "app",
                "appcs",
                "appi",
                "asp",
                "ca",
                "cae",
                "cr",
                "id",
                "insqr",
                "kv",
                "la",
                "logic",
                "rg",
                "sb",
                "sbq",
                "sbt",
                "sbts",
                "st",
                "stapp"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_9.Location": {
              "type": "string",
              "allowedValues": [
                "australiacentral",
                "australiacentral2",
                "australiaeast",
                "australiasoutheast",
                "brazilsouth",
                "brazilsoutheast",
                "brazilus",
                "canadacentral",
                "canadaeast",
                "centralindia",
                "centralus",
                "centraluseuap",
                "eastasia",
                "eastus",
                "eastus2",
                "eastus2euap",
                "eastusstg",
                "francecentral",
                "francesouth",
                "germanynorth",
                "germanywestcentral",
                "israelcentral",
                "italynorth",
                "japaneast",
                "japanwest",
                "jioindiacentral",
                "jioindiawest",
                "koreacentral",
                "koreasouth",
                "mexicocentral",
                "northcentralus",
                "northeurope",
                "norwayeast",
                "norwaywest",
                "polandcentral",
                "qatarcentral",
                "southafricanorth",
                "southafricawest",
                "southcentralus",
                "southcentralusstg",
                "southeastasia",
                "southindia",
                "spaincentral",
                "swedencentral",
                "switzerlandnorth",
                "switzerlandwest",
                "uaecentral",
                "uaenorth",
                "uksouth",
                "ukwest",
                "westcentralus",
                "westeurope",
                "westindia",
                "westus",
                "westus2",
                "westus3"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_9.Options": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_9.ResourceType": {
              "type": "string",
              "allowedValues": [
                "actionGroup",
                "appConfiguration",
                "appService",
                "appServicePlan",
                "applicationInsights",
                "containerApp",
                "containerAppEnvironment",
                "containerRegistry",
                "keyVault",
                "logAnalytics",
                "managedIdentity",
                "resourceGroup",
                "serviceBus",
                "serviceBusQueue",
                "serviceBusTopic",
                "serviceBusTopicSubscription",
                "sheduledQueryRules",
                "staticWebApp",
                "storageAccount",
                "workflow"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_9.Tags": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "string"
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_9.Tenant": {
              "type": "object",
              "properties": {
                "countryCode": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "tenantId": {
                  "type": "string"
                }
              },
              "metadata": {
                "description": "this is bicep's own tenant, there just isn't a type for it",
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "Context": {
              "type": "object",
              "properties": {
                "project": {
                  "type": "string"
                },
                "nameConventionTemplate": {
                  "type": "string"
                },
                "environment": {
                  "type": "string"
                },
                "location": {
                  "$ref": "#/definitions/_9.Location"
                },
                "tenant": {
                  "$ref": "#/definitions/_9.Tenant"
                },
                "tags": {
                  "$ref": "#/definitions/_9.Tags"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "__dynamic": {
                  "parameters": [
                    {
                      "type": "object",
                      "name": "resource"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[reduce(parameters('options'), parameters('resource'), lambda('obj', 'next', union(lambdaVariables('obj'), lambdaVariables('next')))).properties]"
                  },
                  "metadata": {
                    "description": "Compose resouce properties when using dynamic functions\n---\n\n`__dynamic` aids in resource property composition.\nRight now bicep/ARM has a limitation where the whole expression  \nis made dynamic once a dynamic function is used somewhere in the tree.\n\nsince the name, location, and tags of a resouce may not be dynamic you will get [error BCP120](https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-core-diagnostics#BCP120) when you  \napply the config to the resource.\n\n`__dynamic` has the same composition logic as the internal `create_resource` function does.  \n\n### Example\n#### Don't do this\n```bicep\nimport { Context } from '../../../src/types.bicep'\nimport { action_group, with_receiver } from '../../../src/recommended/insights/action-group.bicep'\n\ntargetScope = 'resourceGroup'\n\nparam context Context\nparam alertLogicAppId string\n\nvar actionGroupConfig = action_group(context, 'Alerts', [\n  with_receiver('logicApp', {\n    name: 'Alert messages logic app'\n    resourceId: alertLogicAppId\n    callbackUrl: listCallbackUrl(alertLogicAppId, '2019-05-01').value\n    useCommonAlertSchema: true\n  })\n])\n\nresource actionGroup 'microsoft.insights/actionGroups@2023-09-01-preview' = {\n  name: actionGroupConfig.name\n  location: actionGroupConfig.location\n  tags: actionGroupConfig.tags\n  properties: actionGroupConfig.properties\n}\n```\n\n#### Instead do this\n```bicep\nimport { Context } from '../../../src/types.bicep'\nimport { __dynamic } from '../../../src/utilities.bicep'\nimport { action_group, with_receiver } from '../../../src/recommended/insights/action-group.bicep'\n\ntargetScope = 'resourceGroup'\n\nparam context Context\nparam alertLogicAppId string\n\nvar actionGroupConfig = action_group(context, 'Alerts', [])\n\nresource actionGroup 'microsoft.insights/actionGroups@2023-09-01-preview' = {\n  name: actionGroupConfig.name\n  location: actionGroupConfig.location\n  tags: actionGroupConfig.tags\n  properties: __dynamic(actionGroupConfig, [\n    with_receiver('logicApp', {\n      name: 'Alert messages logic app'\n      resourceId: alertLogicAppId\n      callbackUrl: listCallbackUrl(alertLogicAppId, '2019-05-01').value\n      useCommonAlertSchema: true\n    })\n  ])\n}\n```\n\n### Dev note\nI hate `__dynamic`. i kind of ruined my -imo- elegant API design.  \nbut a limitation is a limitation, and therefor requires a workaround\n\nIf it turns out that `__dynamic` will show up everywhere in my code where I use Tricep,  \nthen I'll re-design the API to not need `__dynamic` anymore.\nUntil then this will have to suffice.\n",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/utilities.bicep"
                    }
                  }
                },
                "action_group": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "string",
                      "name": "name"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_1.action_group(parameters('context'), parameters('name'), parameters('options'))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/insights/action-group.bicep"
                    }
                  }
                },
                "app_insights": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "string",
                      "name": "workspaceId"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_2.app_insights(parameters('context'), 'web', parameters('workspaceId'), parameters('options'))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/insights/app-insights.bicep"
                    }
                  }
                },
                "create_log_alert": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_8.LogAlertProperties",
                      "name": "properties"
                    }
                  ],
                  "output": {
                    "$ref": "#/definitions/_3.LogAlertProperties",
                    "value": {
                      "kind": "LogAlert",
                      "enabled": true,
                      "checkWorkspaceAlertsStorageConfigured": "[coalesce(tryGet(parameters('properties'), 'checkWorkspaceAlertsStorageConfigured'), null())]",
                      "description": "[coalesce(tryGet(parameters('properties'), 'description'), null())]",
                      "displayName": "[coalesce(tryGet(parameters('properties'), 'displayName'), null())]",
                      "evaluationFrequency": "[parameters('properties').evaluationFrequency]",
                      "muteActionsDuration": "[coalesce(tryGet(parameters('properties'), 'muteActionsDuration'), null())]",
                      "overrideQueryTimeRange": "[coalesce(tryGet(parameters('properties'), 'overrideQueryTimeRange'), null())]",
                      "ruleResolveConfiguration": "[coalesce(tryGet(parameters('properties'), 'ruleResolveConfiguration'), null())]",
                      "scopes": "[coalesce(tryGet(parameters('properties'), 'scopes'), null())]",
                      "severity": "[parameters('properties').severity]",
                      "skipQueryValidation": "[coalesce(tryGet(parameters('properties'), 'skipQueryValidation'), null())]",
                      "targetResourceTypes": "[coalesce(tryGet(parameters('properties'), 'targetResourceTypes'), null())]",
                      "windowSize": "[parameters('properties').windowSize]"
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/insights/sheduled-query-rules.bicep"
                    }
                  }
                },
                "log_analytics": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_4.log_analytics(parameters('context'), 'PerGB2018', parameters('options'))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/operational-insights/log-analytics.bicep"
                    }
                  }
                },
                "sheduled_query_rules": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_3.Properties",
                      "name": "properties"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_3.sheduled_query_rules(parameters('context'), parameters('properties'), parameters('options'))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/insights/sheduled-query-rules.bicep"
                    }
                  }
                },
                "with_action_group": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "actionGroupId"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "properties": {
                        "actions": {
                          "actionGroups": [
                            "[parameters('actionGroupId')]"
                          ]
                        }
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/insights/sheduled-query-rules.bicep"
                    }
                  }
                },
                "with_criteria": {
                  "parameters": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/_3.Condition"
                      },
                      "name": "criteria"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "properties": {
                        "criteria": {
                          "allOf": "[parameters('criteria')]"
                        }
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/insights/sheduled-query-rules.bicep"
                    }
                  }
                },
                "with_receiver": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_7.ReceiverType",
                      "name": "type"
                    },
                    {
                      "type": "object",
                      "name": "receiver"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "properties": {
                        "[format('{0}Receivers', parameters('type'))]": [
                          "[parameters('receiver')]"
                        ]
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/insights/action-group.bicep"
                    }
                  }
                },
                "without_auto_mitigate": {
                  "parameters": [],
                  "output": {
                    "type": "object",
                    "value": {
                      "properties": {
                        "autoMigitage": false
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/insights/sheduled-query-rules.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_1",
              "members": {
                "action_group": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "string",
                      "name": "name"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_6.create_resource(parameters('context'), 'actionGroup', union(createArray(createObject('location', 'global', 'properties', createObject('groupShortName', parameters('name'), 'enabled', true(), 'emailReceivers', createArray(), 'smsReceivers', createArray(), 'webhookReceivers', createArray(), 'eventHubReceivers', createArray(), 'itsmReceivers', createArray(), 'azureAppPushReceivers', createArray(), 'automationRunbookReceivers', createArray(), 'voiceReceivers', createArray(), 'logicAppReceivers', createArray(), 'azureFunctionReceivers', createArray(), 'armRoleReceivers', createArray()))), parameters('options')))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/insights/action-group.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_2",
              "members": {
                "app_insights": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "string",
                      "name": "kind"
                    },
                    {
                      "type": "string",
                      "name": "workspaceId"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_6.create_resource(parameters('context'), 'applicationInsights', union(createArray(createObject('kind', parameters('kind'), 'properties', createObject('Application_Type', 'web', 'WorkspaceResourceId', parameters('workspaceId')))), parameters('options')))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/insights/app-insights.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_5",
              "members": {
                "create_name": {
                  "parameters": [
                    {
                      "type": "object",
                      "name": "context"
                    },
                    {
                      "type": "string",
                      "name": "template"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[toLower(reduce(items(parameters('context')), parameters('template'), lambda('t', 'e', replace(string(lambdaVariables('t')), format('${0}', lambdaVariables('e').key), lambdaVariables('e').value))))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                },
                "to_location_abbreviation": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_9.Location",
                      "name": "location"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[createObject('southafricanorth', 'san', 'southafricawest', 'saw', 'australiacentral', 'auc', 'australiacentral2', 'auc2', 'australiaeast', 'aue', 'australiasoutheast', 'ause', 'centralindia', '', 'eastasia', '', 'japaneast', 'jpe', 'japanwest', 'jpw', 'jioindiacentral', '', 'jioindiawest', '', 'koreacentral', 'krc', 'koreasouth', 'krs', 'southindia', '', 'southeastasia', '', 'westindia', '', 'canadacentral', 'cac', 'canadaeast', 'cae', 'francecentral', 'frc', 'francesouth', 'frs', 'germanynorth', 'den', 'germanywestcentral', 'dewc', 'italynorth', 'itn', 'northeurope', 'eun', 'norwayeast', 'noe', 'norwaywest', 'now', 'polandcentral', 'poc', 'spaincentral', 'spc', 'swedencentral', 'swc', 'switzerlandnorth', 'szn', 'switzerlandwest', 'szw', 'uksouth', 'uks', 'ukwest', 'ukw', 'westeurope', 'euw', 'mexicocentral', 'mxc', 'israelcentral', '', 'qatarcentral', 'qtc', 'uaecentral', '', 'uaenorth', '', 'brazilsouth', 'brs', 'brazilsoutheast', 'brse', 'brazilus', '', 'centralus', 'usc', 'centraluseuap', '', 'eastus', 'use', 'eastus2', 'use2', 'eastus2euap', '', 'eastusstg', '', 'northcentralus', 'usnc', 'southcentralus', 'ussc', 'southcentralusstg', '', 'westcentralus', 'uswc', 'westus', 'usw', 'westus2', 'usw2', 'westus3', 'usw3')[parameters('location')]]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                },
                "to_resource_abbreviation": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_9.ResourceType",
                      "name": "resourceType"
                    }
                  ],
                  "output": {
                    "$ref": "#/definitions/_9.Abbreviation",
                    "value": "[createObject('resourceGroup', 'rg', 'containerApp', 'ca', 'containerAppEnvironment', 'cae', 'keyVault', 'kv', 'managedIdentity', 'id', 'staticWebApp', 'stapp', 'appService', 'app', 'appServicePlan', 'asp', 'containerRegistry', 'cr', 'appConfiguration', 'appcs', 'serviceBus', 'sb', 'serviceBusQueue', 'sbq', 'serviceBusTopic', 'sbt', 'serviceBusTopicSubscription', 'sbts', 'applicationInsights', 'appi', 'storageAccount', 'st', 'logAnalytics', 'la', 'actionGroup', 'ag', 'sheduledQueryRules', 'insqr', 'workflow', 'logic')[parameters('resourceType')]]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_6",
              "members": {
                "create_resource": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_9.ResourceType",
                      "name": "resourceType"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[reduce(parameters('options'), createObject('name', _5.create_name(createObject('environment', parameters('context').environment, 'location', _5.to_location_abbreviation(parameters('context').location), 'type', _5.to_resource_abbreviation(parameters('resourceType')), 'project', parameters('context').project), parameters('context').nameConventionTemplate), 'location', parameters('context').location, 'tags', parameters('context').tags, 'properties', createObject()), lambda('obj', 'next', union(lambdaVariables('obj'), lambdaVariables('next'))))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/resource.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_4",
              "members": {
                "log_analytics": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_4.Sku",
                      "name": "sku"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_6.create_resource(parameters('context'), 'logAnalytics', union(createArray(createObject('properties', createObject('sku', createObject('name', parameters('sku'))))), parameters('options')))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/operational-insights/log-analytics.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_3",
              "members": {
                "sheduled_query_rules": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_3.Properties",
                      "name": "properties"
                    },
                    {
                      "$ref": "#/definitions/_9.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_6.create_resource(parameters('context'), 'sheduledQueryRules', union(createArray(createObject('kind', parameters('properties').kind, 'properties', createObject())), parameters('options')))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/insights/sheduled-query-rules.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "context": {
              "$ref": "#/definitions/Context"
            },
            "alertLogicApp": {
              "type": "string",
              "metadata": {
                "resourceType": "Microsoft.Logic/workflows@2019-05-01"
              }
            }
          },
          "variables": {
            "logAnalyticsConfig": "[__bicep.log_analytics(parameters('context'), createArray())]",
            "appInsightsConfig": "[__bicep.app_insights(parameters('context'), resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsConfig').name), createArray())]",
            "actionGroupConfig": "[__bicep.action_group(parameters('context'), 'Alerts', createArray())]",
            "sheduledQueryRulesConfig": "[__bicep.sheduled_query_rules(parameters('context'), __bicep.create_log_alert(createObject('displayName', 'Failures occured', 'evaluationFrequency', 'PT5M', 'severity', 1, 'windowSize', 'PT10M', 'scopes', createArray(resourceId('Microsoft.Insights/components', variables('appInsightsConfig').name)), 'targetResourceTypes', createArray('microsoft.insights/components'))), createArray(__bicep.without_auto_mitigate(), __bicep.with_criteria(createArray(createObject('query', 'requests\n| where success == false\n| summarize failedCount=sum(itemCount), impactedUsers=dcount(user_Id) by operation_Name\n| order by failedCount desc\n', 'timeAggregation', 'Count', 'dimensions', createArray(), 'operator', 'GreaterThan', 'threshold', 0, 'failingPeriods', createObject('numberOfEvaluationPeriods', 1, 'minFailingPeriodsToAlert', 1)))), __bicep.with_action_group(resourceId('Microsoft.Insights/actionGroups', variables('actionGroupConfig').name))))]"
          },
          "resources": {
            "logAnalytics": {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('logAnalyticsConfig').name]",
              "location": "[variables('logAnalyticsConfig').location]",
              "tags": "[variables('logAnalyticsConfig').tags]",
              "properties": "[variables('logAnalyticsConfig').properties]"
            },
            "appInsights": {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('appInsightsConfig').name]",
              "location": "[variables('appInsightsConfig').location]",
              "tags": "[variables('appInsightsConfig').tags]",
              "kind": "[variables('appInsightsConfig').kind]",
              "properties": "[variables('appInsightsConfig').properties]",
              "dependsOn": [
                "logAnalytics"
              ]
            },
            "actionGroup": {
              "type": "Microsoft.Insights/actionGroups",
              "apiVersion": "2023-09-01-preview",
              "name": "[variables('actionGroupConfig').name]",
              "location": "[variables('actionGroupConfig').location]",
              "tags": "[variables('actionGroupConfig').tags]",
              "properties": "[__bicep.__dynamic(variables('actionGroupConfig'), createArray(__bicep.with_receiver('logicApp', createObject('name', 'Alert messages logic app', 'resourceId', parameters('alertLogicApp'), 'callbackUrl', listCallbackUrl(parameters('alertLogicApp'), '2019-05-01').value, 'useCommonAlertSchema', true()))))]"
            },
            "scheduledQueryRules": {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2024-01-01-preview",
              "name": "[variables('sheduledQueryRulesConfig').name]",
              "location": "[variables('sheduledQueryRulesConfig').location]",
              "tags": "[variables('sheduledQueryRulesConfig').tags]",
              "properties": "[variables('sheduledQueryRulesConfig').properties]",
              "dependsOn": [
                "actionGroup",
                "appInsights"
              ]
            }
          },
          "outputs": {
            "logAnalyticsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsConfig').name)]"
            }
          }
        }
      },
      "dependsOn": [
        "alertLogicApp",
        "group"
      ]
    },
    "containers": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "containers",
      "resourceGroup": "[variables('resourceGroupConfig').name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "context": {
            "value": "[variables('context')]"
          },
          "logAnalyticsId": {
            "value": "[reference('monitoring').outputs.logAnalyticsId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "16403990235753379257"
            }
          },
          "definitions": {
            "_1.Configuration": {
              "type": "object",
              "properties": {
                "activeRevisionsMode": {
                  "type": "string",
                  "allowedValues": [
                    "Multiple",
                    "Single"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "ActiveRevisionsMode controls how active revisions are handled for the Container app: {list}{item}Multiple: multiple revisions can be active.{/item}{item}Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.{/item}{/list}"
                  }
                },
                "dapr": {
                  "$ref": "#/definitions/_1.Dapr",
                  "nullable": true,
                  "metadata": {
                    "description": "Dapr configuration for the Container App."
                  }
                },
                "ingress": {
                  "$ref": "#/definitions/_1.Ingress",
                  "nullable": true,
                  "metadata": {
                    "description": "Ingress configurations."
                  }
                },
                "maxInactiveRevisions": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Max inactive revisions a Container App can have."
                  }
                },
                "registries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.RegistryCredentials"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Collection of private container registry credentials for containers used by the Container app."
                  }
                },
                "secrets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.Secret"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Collection of secrets used by a Container app."
                  }
                },
                "service": {
                  "$ref": "#/definitions/_1.Service",
                  "nullable": true,
                  "metadata": {
                    "description": "Container App to be a dev Container App Service."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.Container": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Container start command arguments."
                  }
                },
                "command": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Container start command."
                  }
                },
                "env": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.EnvironmentVar"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Container environment variables."
                  }
                },
                "image": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Container image tag."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Custom container name."
                  }
                },
                "probes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.ContainerAppProbe"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "List of probes for the container."
                  }
                },
                "resources": {
                  "$ref": "#/definitions/_1.ContainerResources",
                  "nullable": true,
                  "metadata": {
                    "description": "Container resource requirements."
                  }
                },
                "volumeMounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.VolumeMount"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Container volume mounts."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ContainerApp": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 32,
                  "metadata": {
                    "description": "The resource name."
                  }
                },
                "location": {
                  "type": "string",
                  "metadata": {
                    "description": "The geo-location where the resource lives."
                  }
                },
                "tags": {
                  "$ref": "#/definitions/_7.Tags",
                  "nullable": true,
                  "metadata": {
                    "description": "Resource tags."
                  }
                },
                "extendedLocation": {
                  "$ref": "#/definitions/_1.ExtendedLocation",
                  "nullable": true,
                  "metadata": {
                    "description": "The complex type of the extended location."
                  }
                },
                "identity": {
                  "$ref": "#/definitions/_1.ManagedServiceIdentity",
                  "nullable": true,
                  "metadata": {
                    "description": "managed identities for the Container App to interact with other Azure services without maintaining any secrets or credentials in code."
                  }
                },
                "managedBy": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource."
                  }
                },
                "properties": {
                  "$ref": "#/definitions/_1.ContainerAppProperties",
                  "nullable": true,
                  "metadata": {
                    "description": "ContainerApp resource specific properties\t"
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ContainerAppProbe": {
              "type": "object",
              "properties": {
                "failureThreshold": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. Maximum value is 10."
                  }
                },
                "httpGet": {
                  "$ref": "#/definitions/_1.ContainerAppProbeHttpGet",
                  "nullable": true,
                  "metadata": {
                    "description": "HTTPGet specifies the http request to perform."
                  }
                },
                "initialDelaySeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated. Minimum value is 1. Maximum value is 60."
                  }
                },
                "periodSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is 240."
                  }
                },
                "successThreshold": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10."
                  }
                },
                "tcpSocket": {
                  "$ref": "#/definitions/_1.ContainerAppProbeTcpSocket",
                  "nullable": true,
                  "metadata": {
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                  }
                },
                "terminationGracePeriodSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                  }
                },
                "timeoutSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 240."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "Liveness",
                    "Readiness",
                    "Startup"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "The type of probe."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ContainerAppProbeHttpGet": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
                  }
                },
                "httpHeaders": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.ContainerAppProbeHttpGetHttpHeadersItem"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Custom headers to set in the request. HTTP allows repeated headers."
                  }
                },
                "path": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Path to access on the HTTP server."
                  }
                },
                "port": {
                  "type": "int",
                  "metadata": {
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                  }
                },
                "scheme": {
                  "type": "string",
                  "allowedValues": [
                    "HTTP",
                    "HTTPS"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Scheme to use for connecting to the host. Defaults to HTTP."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ContainerAppProbeHttpGetHttpHeadersItem": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The header field name."
                  }
                },
                "value": {
                  "type": "string",
                  "metadata": {
                    "description": "The header field value."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ContainerAppProbeTcpSocket": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional: Host name to connect to, defaults to the pod IP."
                  }
                },
                "port": {
                  "type": "int",
                  "metadata": {
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ContainerAppProperties": {
              "type": "object",
              "properties": {
                "configuration": {
                  "$ref": "#/definitions/_1.Configuration",
                  "nullable": true,
                  "metadata": {
                    "description": "Non versioned Container App configuration properties."
                  }
                },
                "environmentId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Resource ID of environment."
                  }
                },
                "template": {
                  "$ref": "#/definitions/_1.Template",
                  "nullable": true,
                  "metadata": {
                    "description": "Container App versioned application definition."
                  }
                },
                "workloadProfileName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Workload profile name to pin for container app execution."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ContainerResources": {
              "type": "object",
              "allowedValues": [
                {
                  "cpu": "0.25",
                  "memory": "0.5Gi"
                },
                {
                  "cpu": "0.5",
                  "memory": "1.0Gi"
                },
                {
                  "cpu": "0.75",
                  "memory": "1.5Gi"
                },
                {
                  "cpu": "1.0",
                  "memory": "2.0Gi"
                },
                {
                  "cpu": "1.25",
                  "memory": "2.5Gi"
                },
                {
                  "cpu": "1.5",
                  "memory": "3.0Gi"
                },
                {
                  "cpu": "1.75",
                  "memory": "3.5Gi"
                },
                {
                  "cpu": "2.0",
                  "memory": "4.0Gi"
                }
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.CorsPolicy": {
              "type": "object",
              "properties": {
                "allowCredentials": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies whether the resource allows credentials."
                  }
                },
                "allowedHeaders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the content for the access-control-allow-headers header."
                  }
                },
                "allowedMethods": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the content for the access-control-allow-methods header."
                  }
                },
                "allowedOrigins": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Specifies the content for the access-control-allow-origins header."
                  }
                },
                "exposeHeaders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the content for the access-control-expose-headers header."
                  }
                },
                "maxAge": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the content for the access-control-max-age header."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.CustomDomain": {
              "type": "object",
              "properties": {
                "bindingType": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "SniEnabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Custom Domain binding type."
                  }
                },
                "certificateId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment."
                  }
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Hostname."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.CustomScaleRule": {
              "type": "object",
              "properties": {
                "auth": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.ScaleRuleAuth"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Authentication secrets for the custom scale rule."
                  }
                },
                "metadata": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Metadata properties to describe custom scale rule."
                  }
                },
                "type": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Type of the custom scale rule eg: azure-servicebus, redis etc.."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.Dapr": {
              "type": "object",
              "properties": {
                "appId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Dapr application identifier."
                  }
                },
                "appPort": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Tells Dapr which port your application is listening on."
                  }
                },
                "appProtocol": {
                  "type": "string",
                  "allowedValues": [
                    "grpc",
                    "http"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http."
                  }
                },
                "enableApiLogging": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Enables API logging for the Dapr sidecar."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Boolean indicating if the Dapr side car is enabled."
                  }
                },
                "httpMaxRequestSize": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB."
                  }
                },
                "httpReadBufferSize": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB."
                  }
                },
                "logLevel": {
                  "type": "string",
                  "allowedValues": [
                    "debug",
                    "error",
                    "info",
                    "warn"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.EnvironmentVar": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Environment variable name."
                  }
                },
                "secretRef": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Name of the Container App secret from which to pull the environment variable value."
                  }
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Non-secret environment variable value."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ExtendedLocation": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The name of the extended location."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "CustomLocation"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "The type of the extended location."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.HttpScaleRule": {
              "type": "object",
              "properties": {
                "auth": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.ScaleRuleAuth"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Authentication secrets for the http scale rule."
                  }
                },
                "metadata": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Metadata properties to describe http scale rule."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.Ingress": {
              "type": "object",
              "properties": {
                "additionalPortMappings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.IngressPortMapping"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "allowInsecure": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "clientCertificateMode": {
                  "type": "string",
                  "allowedValues": [
                    "accept",
                    "ignore",
                    "require"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "corsPolicy": {
                  "$ref": "#/definitions/_1.CorsPolicy",
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "customDomains": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.CustomDomain"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "exposedPort": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "external": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "ipSecurityRestrictions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.IpSecurityRestrictionRule"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "stickySessions": {
                  "$ref": "#/definitions/_1.IngressStickySessions",
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "targetPort": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "traffic": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.TrafficWeight"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                },
                "transport": {
                  "type": "string",
                  "allowedValues": [
                    "auto",
                    "http",
                    "http2",
                    "tcp"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.IngressPortMapping": {
              "type": "object",
              "properties": {
                "exposedPort": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Specifies the exposed port for the target port. If not specified, it defaults to target port."
                  }
                },
                "external": {
                  "type": "bool",
                  "metadata": {
                    "description": "Specifies whether the app port is accessible outside of the environment."
                  }
                },
                "targetPort": {
                  "type": "int",
                  "metadata": {
                    "description": "Specifies the port user's container listens on."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.IngressStickySessions": {
              "type": "object",
              "properties": {
                "affinity": {
                  "type": "string",
                  "allowedValues": [
                    "none",
                    "sticky"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Sticky Session Affinity."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.InitContainer": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Container start command arguments."
                  }
                },
                "command": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Container start command."
                  }
                },
                "env": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.EnvironmentVar"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Container environment variables."
                  }
                },
                "image": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Container image tag."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Custom container name."
                  }
                },
                "resources": {
                  "$ref": "#/definitions/_1.ContainerResources",
                  "nullable": true,
                  "metadata": {
                    "description": "Container resource requirements."
                  }
                },
                "volumeMounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.VolumeMount"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Container volume mounts."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.IpSecurityRestrictionRule": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "metadata": {
                    "description": "Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Describe the IP restriction rule that is being sent to the container-app. This is an optional field."
                  }
                },
                "ipAddressRange": {
                  "type": "string",
                  "metadata": {
                    "description": "CIDR notation to match incoming IP address."
                  }
                },
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Name for the IP restriction rule."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ManagedServiceIdentity": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "None",
                    "SystemAssigned",
                    "SystemAssigned,UserAssigned",
                    "UserAssigned"
                  ],
                  "metadata": {
                    "description": "Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed)."
                  }
                },
                "userAssignedIdentities": {
                  "$ref": "#/definitions/_1.UserAssignedIdentities",
                  "nullable": true,
                  "metadata": {
                    "description": "The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.QueueScaleRule": {
              "type": "object",
              "properties": {
                "auth": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.ScaleRuleAuth"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Authentication secrets for the queue scale rule."
                  }
                },
                "queueLength": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Queue length."
                  }
                },
                "queueName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Queue name."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.RegistryCredentials": {
              "type": "object",
              "properties": {
                "identity": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system'."
                  }
                },
                "passwordSecretRef": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The name of the Secret that contains the registry login password."
                  }
                },
                "server": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Container Registry Server."
                  }
                },
                "username": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Container Registry Username."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.Scale": {
              "type": "object",
              "properties": {
                "maxReplicas": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                  }
                },
                "minReplicas": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Minimum number of container replicas."
                  }
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.ScaleRule"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Scaling rules."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ScaleRule": {
              "type": "object",
              "properties": {
                "azureQueue": {
                  "$ref": "#/definitions/_1.QueueScaleRule",
                  "nullable": true,
                  "metadata": {
                    "description": "Azure Queue based scaling."
                  }
                },
                "custom": {
                  "$ref": "#/definitions/_1.CustomScaleRule",
                  "nullable": true,
                  "metadata": {
                    "description": "Custom scale rule."
                  }
                },
                "http": {
                  "$ref": "#/definitions/_1.HttpScaleRule",
                  "nullable": true,
                  "metadata": {
                    "description": "HTTP requests based scaling."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Scale Rule Name."
                  }
                },
                "tcp": {
                  "$ref": "#/definitions/_1.TcpScaleRule",
                  "nullable": true,
                  "metadata": {
                    "description": "Tcp requests based scaling."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ScaleRuleAuth": {
              "type": "object",
              "properties": {
                "secretRef": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Name of the secret from which to pull the auth params."
                  }
                },
                "triggerParameter": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Trigger Parameter that uses the secret."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.Secret": {
              "type": "object",
              "properties": {
                "identity": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity."
                  }
                },
                "keyVaultUrl": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Azure Key Vault URL pointing to the secret referenced by the container app."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Secret Name."
                  }
                },
                "value": {
                  "type": "securestring",
                  "nullable": true,
                  "metadata": {
                    "description": "Secret Value."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.SecretVolumeItem": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef."
                  }
                },
                "secretRef": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Name of the Container App secret from which to pull the secret value."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.Service": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "metadata": {
                    "description": "Dev ContainerApp service type."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.ServiceBind": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "serviceId."
                  }
                },
                "serviceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Resource id of the target service."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.TcpScaleRule": {
              "type": "object",
              "properties": {
                "auth": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.ScaleRuleAuth"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Authentication secrets for the tcp scale rule."
                  }
                },
                "metadata": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Metadata properties to describe tcp scale rule."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.Template": {
              "type": "object",
              "properties": {
                "containers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.Container"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "List of container definitions for the Container App."
                  }
                },
                "initContainers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.InitContainer"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "List of specialized containers that run before app containers."
                  }
                },
                "revisionSuffix": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "User friendly suffix that is appended to the revision name."
                  }
                },
                "scale": {
                  "$ref": "#/definitions/_1.Scale",
                  "nullable": true,
                  "metadata": {
                    "description": "Scaling properties for the Container App."
                  }
                },
                "serviceBinds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.ServiceBind"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "List of container app services bound to the app."
                  }
                },
                "terminationGracePeriodSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds."
                  }
                },
                "volumes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.Volume"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "List of volume definitions for the Container App."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.TrafficWeight": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Associates a traffic label with a revision."
                  }
                },
                "latestRevision": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Indicates that the traffic weight belongs to a latest stable revision."
                  }
                },
                "revisionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Name of a revision."
                  }
                },
                "weight": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Traffic weight assigned to a revision."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.UserAssignedIdentities": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "$ref": "#/definitions/_1.UserAssignedIdentity"
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.UserAssignedIdentity": {
              "type": "object",
              "properties": {},
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.Volume": {
              "type": "object",
              "properties": {
                "mountOptions": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Mount options used while mounting the AzureFile. Must be a comma-separated string."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Volume name."
                  }
                },
                "secrets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.SecretVolumeItem"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to volume."
                  }
                },
                "storageName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Name of storage resource. No need to provide for EmptyDir and Secret."
                  }
                },
                "storageType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureFile",
                    "EmptyDir",
                    "Secret"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Storage type for the volume. If not provided, use EmptyDir."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_1.VolumeMount": {
              "type": "object",
              "properties": {
                "mountPath": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Path within the container at which the volume should be mounted.Must not contain ':'."
                  }
                },
                "subPath": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                  }
                },
                "volumeName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "This must match the Name of a Volume."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/app/container-app.bicep"
                }
              }
            },
            "_3.Sku": {
              "type": "string",
              "allowedValues": [
                "Basic",
                "Classic",
                "Premium",
                "Standard"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/base/container-registry/container-registry.bicep"
                }
              }
            },
            "_6.ContainerConfig": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "resources": {
                  "$ref": "#/definitions/_1.Container/properties/resources",
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                }
              }
            },
            "_6.TrafficSplittingConfig": {
              "type": "object",
              "properties": {
                "by": {
                  "type": "string",
                  "allowedValues": [
                    "label",
                    "name"
                  ]
                },
                "weights": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "int",
                    "minValue": 0,
                    "maxValue": 100
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                }
              }
            },
            "_7.Abbreviation": {
              "type": "string",
              "allowedValues": [
                "ag",
                "app",
                "appcs",
                "appi",
                "asp",
                "ca",
                "cae",
                "cr",
                "id",
                "insqr",
                "kv",
                "la",
                "logic",
                "rg",
                "sb",
                "sbq",
                "sbt",
                "sbts",
                "st",
                "stapp"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_7.Location": {
              "type": "string",
              "allowedValues": [
                "australiacentral",
                "australiacentral2",
                "australiaeast",
                "australiasoutheast",
                "brazilsouth",
                "brazilsoutheast",
                "brazilus",
                "canadacentral",
                "canadaeast",
                "centralindia",
                "centralus",
                "centraluseuap",
                "eastasia",
                "eastus",
                "eastus2",
                "eastus2euap",
                "eastusstg",
                "francecentral",
                "francesouth",
                "germanynorth",
                "germanywestcentral",
                "israelcentral",
                "italynorth",
                "japaneast",
                "japanwest",
                "jioindiacentral",
                "jioindiawest",
                "koreacentral",
                "koreasouth",
                "mexicocentral",
                "northcentralus",
                "northeurope",
                "norwayeast",
                "norwaywest",
                "polandcentral",
                "qatarcentral",
                "southafricanorth",
                "southafricawest",
                "southcentralus",
                "southcentralusstg",
                "southeastasia",
                "southindia",
                "spaincentral",
                "swedencentral",
                "switzerlandnorth",
                "switzerlandwest",
                "uaecentral",
                "uaenorth",
                "uksouth",
                "ukwest",
                "westcentralus",
                "westeurope",
                "westindia",
                "westus",
                "westus2",
                "westus3"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_7.Options": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_7.ResourceType": {
              "type": "string",
              "allowedValues": [
                "actionGroup",
                "appConfiguration",
                "appService",
                "appServicePlan",
                "applicationInsights",
                "containerApp",
                "containerAppEnvironment",
                "containerRegistry",
                "keyVault",
                "logAnalytics",
                "managedIdentity",
                "resourceGroup",
                "serviceBus",
                "serviceBusQueue",
                "serviceBusTopic",
                "serviceBusTopicSubscription",
                "sheduledQueryRules",
                "staticWebApp",
                "storageAccount",
                "workflow"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_7.Tags": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "string"
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "_7.Tenant": {
              "type": "object",
              "properties": {
                "countryCode": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "tenantId": {
                  "type": "string"
                }
              },
              "metadata": {
                "description": "this is bicep's own tenant, there just isn't a type for it",
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            },
            "Context": {
              "type": "object",
              "properties": {
                "project": {
                  "type": "string"
                },
                "nameConventionTemplate": {
                  "type": "string"
                },
                "environment": {
                  "type": "string"
                },
                "location": {
                  "$ref": "#/definitions/_7.Location"
                },
                "tenant": {
                  "$ref": "#/definitions/_7.Tenant"
                },
                "tags": {
                  "$ref": "#/definitions/_7.Tags"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../../../src/types.bicep"
                }
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "__dynamic": {
                  "parameters": [
                    {
                      "type": "object",
                      "name": "resource"
                    },
                    {
                      "$ref": "#/definitions/_7.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[reduce(parameters('options'), parameters('resource'), lambda('obj', 'next', union(lambdaVariables('obj'), lambdaVariables('next')))).properties]"
                  },
                  "metadata": {
                    "description": "Compose resouce properties when using dynamic functions\n---\n\n`__dynamic` aids in resource property composition.\nRight now bicep/ARM has a limitation where the whole expression  \nis made dynamic once a dynamic function is used somewhere in the tree.\n\nsince the name, location, and tags of a resouce may not be dynamic you will get [error BCP120](https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-core-diagnostics#BCP120) when you  \napply the config to the resource.\n\n`__dynamic` has the same composition logic as the internal `create_resource` function does.  \n\n### Example\n#### Don't do this\n```bicep\nimport { Context } from '../../../src/types.bicep'\nimport { action_group, with_receiver } from '../../../src/recommended/insights/action-group.bicep'\n\ntargetScope = 'resourceGroup'\n\nparam context Context\nparam alertLogicAppId string\n\nvar actionGroupConfig = action_group(context, 'Alerts', [\n  with_receiver('logicApp', {\n    name: 'Alert messages logic app'\n    resourceId: alertLogicAppId\n    callbackUrl: listCallbackUrl(alertLogicAppId, '2019-05-01').value\n    useCommonAlertSchema: true\n  })\n])\n\nresource actionGroup 'microsoft.insights/actionGroups@2023-09-01-preview' = {\n  name: actionGroupConfig.name\n  location: actionGroupConfig.location\n  tags: actionGroupConfig.tags\n  properties: actionGroupConfig.properties\n}\n```\n\n#### Instead do this\n```bicep\nimport { Context } from '../../../src/types.bicep'\nimport { __dynamic } from '../../../src/utilities.bicep'\nimport { action_group, with_receiver } from '../../../src/recommended/insights/action-group.bicep'\n\ntargetScope = 'resourceGroup'\n\nparam context Context\nparam alertLogicAppId string\n\nvar actionGroupConfig = action_group(context, 'Alerts', [])\n\nresource actionGroup 'microsoft.insights/actionGroups@2023-09-01-preview' = {\n  name: actionGroupConfig.name\n  location: actionGroupConfig.location\n  tags: actionGroupConfig.tags\n  properties: __dynamic(actionGroupConfig, [\n    with_receiver('logicApp', {\n      name: 'Alert messages logic app'\n      resourceId: alertLogicAppId\n      callbackUrl: listCallbackUrl(alertLogicAppId, '2019-05-01').value\n      useCommonAlertSchema: true\n    })\n  ])\n}\n```\n\n### Dev note\nI hate `__dynamic`. i kind of ruined my -imo- elegant API design.  \nbut a limitation is a limitation, and therefor requires a workaround\n\nIf it turns out that `__dynamic` will show up everywhere in my code where I use Tricep,  \nthen I'll re-design the API to not need `__dynamic` anymore.\nUntil then this will have to suffice.\n",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/utilities.bicep"
                    }
                  }
                },
                "container": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_6.ContainerConfig",
                      "name": "config"
                    }
                  ],
                  "output": {
                    "$ref": "#/definitions/_1.Container",
                    "value": {
                      "name": "[replace(parameters('config').name, ' ', '-')]",
                      "image": "[parameters('config').image]",
                      "resources": "[coalesce(tryGet(parameters('config'), 'resources'), createObject('cpu', '0.25', 'memory', '0.5Gi'))]"
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                    }
                  }
                },
                "container_app": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/_1.Container"
                      },
                      "name": "containers"
                    },
                    {
                      "$ref": "#/definitions/_7.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_1.container_app(parameters('context'), parameters('containers'), union(createArray(createObject('properties', createObject('configuration', createObject('activeRevisionsMode', 'Single')))), parameters('options')))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                    }
                  }
                },
                "container_app_environment": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_7.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_2.container_app_environment(parameters('context'), parameters('options'))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                    }
                  }
                },
                "container_registry": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_7.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_3.container_registry(parameters('context'), 'Standard', parameters('options'))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/container-registry/container-registry.bicep"
                    }
                  }
                },
                "with_app_logs": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "customerId"
                    },
                    {
                      "type": "string",
                      "name": "sharedKey"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "properties": {
                        "appLogsConfiguration": {
                          "destination": "log-analytics",
                          "logAnalyticsConfiguration": {
                            "customerId": "[parameters('customerId')]",
                            "sharedKey": "[parameters('sharedKey')]"
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                    }
                  }
                },
                "with_auto_scaling": {
                  "parameters": [
                    {
                      "type": "int",
                      "name": "min"
                    },
                    {
                      "type": "int",
                      "name": "max"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "type": "object"
                      },
                      "name": "rules"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "properties": {
                        "template": {
                          "scale": {
                            "minReplicas": "[parameters('min')]",
                            "maxReplicas": "[parameters('max')]",
                            "rules": "[map(items(parameters('rules')), lambda('rule', createObject('name', toLower(lambdaVariables('rule').key), 'http', createObject('metadata', lambdaVariables('rule').value))))]"
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                    }
                  }
                },
                "with_dapr": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "int",
                      "name": "port"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "properties": {
                      "properties": {
                        "type": "object",
                        "properties": {
                          "configuration": {
                            "type": "object",
                            "properties": {
                              "dapr": {
                                "$ref": "#/definitions/_1.Dapr"
                              }
                            }
                          }
                        }
                      }
                    },
                    "value": {
                      "properties": {
                        "configuration": {
                          "dapr": {
                            "appId": "[_4.create_name(createObject('env', parameters('context').environment, 'loc', _4.to_location_abbreviation(parameters('context').location), 'type', _4.to_resource_abbreviation('containerApp'), 'project', parameters('context').project), parameters('context').nameConventionTemplate)]",
                            "appPort": "[parameters('port')]",
                            "appProtocol": "http",
                            "enabled": true,
                            "enableApiLogging": true,
                            "logLevel": "info"
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                    }
                  }
                },
                "with_environment": {
                  "parameters": [
                    {
                      "type": "string",
                      "name": "id"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "properties": {
                        "environmentId": "[parameters('id')]"
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                    }
                  }
                },
                "with_managed_identity": {
                  "parameters": [],
                  "output": {
                    "type": "object",
                    "value": {
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    }
                  },
                  "metadata": {
                    "description": "Apply system assigned managed identity to the current config\n---\n\n```bicep{2,10,17}\nimport { Context } from 'br/Tricep:types:latest'\nimport { with_managed_identity } from 'br/Tricep:common/identity:latest'\nimport { workflow } from 'br/Tricep:recommended/logic/workflow:latest'\n\ntargetScope = 'resourceGroup'\n\nparam context Context\n\nvar workflowConfig = workflow(context, [\n  with_managed_identity()\n])\n\nresource sendMessageOverTeamsAndSlack 'Microsoft.Logic/workflows@2019-05-01' = {\n  name: workflowConfig.name\n  location: workflowConfig.location\n  tags: workflowConfig.tags\n  identity: workflowConfig.identity\n  properties: workflowConfig.properties\n}\n```\n",
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/common/identity.bicep"
                    }
                  }
                },
                "with_name": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "string",
                      "name": "name"
                    }
                  ],
                  "output": {
                    "$ref": "#/definitions/Context",
                    "value": "[shallowMerge(createArray(parameters('context'), createObject('nameConventionTemplate', format('{0}-{1}', parameters('context').nameConventionTemplate, parameters('name')))))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/common/context.bicep"
                    }
                  }
                },
                "with_traffic_splitting": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_6.TrafficSplittingConfig",
                      "name": "config"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "properties": {
                        "configuration": {
                          "activeRevisionsMode": "Multiple",
                          "ingress": {
                            "traffic": "[map(items(parameters('config').weights), lambda('x', createObject(format('{0}', if(equals(parameters('config').by, 'name'), 'revisionName', 'label')), lambdaVariables('x').key, 'weight', lambdaVariables('x').value)))]"
                          }
                        }
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/recommended/app/container-app.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_1",
              "members": {
                "container_app": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/_1.Container"
                      },
                      "name": "containers"
                    },
                    {
                      "$ref": "#/definitions/_7.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_5.create_resource(parameters('context'), 'containerApp', union(createArray(createObject('properties', createObject('template', createObject('containers', map(parameters('containers'), lambda('c', union(lambdaVariables('c'), createObject('resources', createObject('cpu', json(coalesce(tryGet(lambdaVariables('c').resources, 'cpu'), '0.25')), 'memory', coalesce(tryGet(lambdaVariables('c').resources, 'memory'), '0.5Gi')))))))))), parameters('options')))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/app/container-app.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_2",
              "members": {
                "container_app_environment": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_7.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_5.create_resource(parameters('context'), 'containerAppEnvironment', concat(createArray(createObject()), parameters('options')))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/app/container-app/environment.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_3",
              "members": {
                "container_registry": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_3.Sku",
                      "name": "sku"
                    },
                    {
                      "$ref": "#/definitions/_7.Options",
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[_5.create_resource(parameters('context'), 'containerRegistry', concat(createArray(createObject('sku', createObject('name', parameters('sku')))), parameters('options')))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/container-registry/container-registry.bicep"
                    }
                  }
                },
                "with_sku": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_3.Sku",
                      "name": "sku"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": {
                      "sku": {
                        "name": "[parameters('sku')]"
                      }
                    }
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/base/container-registry/container-registry.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_4",
              "members": {
                "create_name": {
                  "parameters": [
                    {
                      "type": "object",
                      "name": "context"
                    },
                    {
                      "type": "string",
                      "name": "template"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[toLower(reduce(items(parameters('context')), parameters('template'), lambda('t', 'e', replace(string(lambdaVariables('t')), format('${0}', lambdaVariables('e').key), lambdaVariables('e').value))))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                },
                "to_location_abbreviation": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_7.Location",
                      "name": "location"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[createObject('southafricanorth', 'san', 'southafricawest', 'saw', 'australiacentral', 'auc', 'australiacentral2', 'auc2', 'australiaeast', 'aue', 'australiasoutheast', 'ause', 'centralindia', '', 'eastasia', '', 'japaneast', 'jpe', 'japanwest', 'jpw', 'jioindiacentral', '', 'jioindiawest', '', 'koreacentral', 'krc', 'koreasouth', 'krs', 'southindia', '', 'southeastasia', '', 'westindia', '', 'canadacentral', 'cac', 'canadaeast', 'cae', 'francecentral', 'frc', 'francesouth', 'frs', 'germanynorth', 'den', 'germanywestcentral', 'dewc', 'italynorth', 'itn', 'northeurope', 'eun', 'norwayeast', 'noe', 'norwaywest', 'now', 'polandcentral', 'poc', 'spaincentral', 'spc', 'swedencentral', 'swc', 'switzerlandnorth', 'szn', 'switzerlandwest', 'szw', 'uksouth', 'uks', 'ukwest', 'ukw', 'westeurope', 'euw', 'mexicocentral', 'mxc', 'israelcentral', '', 'qatarcentral', 'qtc', 'uaecentral', '', 'uaenorth', '', 'brazilsouth', 'brs', 'brazilsoutheast', 'brse', 'brazilus', '', 'centralus', 'usc', 'centraluseuap', '', 'eastus', 'use', 'eastus2', 'use2', 'eastus2euap', '', 'eastusstg', '', 'northcentralus', 'usnc', 'southcentralus', 'ussc', 'southcentralusstg', '', 'westcentralus', 'uswc', 'westus', 'usw', 'westus2', 'usw2', 'westus3', 'usw3')[parameters('location')]]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                },
                "to_resource_abbreviation": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/_7.ResourceType",
                      "name": "resourceType"
                    }
                  ],
                  "output": {
                    "$ref": "#/definitions/_7.Abbreviation",
                    "value": "[createObject('resourceGroup', 'rg', 'containerApp', 'ca', 'containerAppEnvironment', 'cae', 'keyVault', 'kv', 'managedIdentity', 'id', 'staticWebApp', 'stapp', 'appService', 'app', 'appServicePlan', 'asp', 'containerRegistry', 'cr', 'appConfiguration', 'appcs', 'serviceBus', 'sb', 'serviceBusQueue', 'sbq', 'serviceBusTopic', 'sbt', 'serviceBusTopicSubscription', 'sbts', 'applicationInsights', 'appi', 'storageAccount', 'st', 'logAnalytics', 'la', 'actionGroup', 'ag', 'sheduledQueryRules', 'insqr', 'workflow', 'logic')[parameters('resourceType')]]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/name.bicep"
                    }
                  }
                }
              }
            },
            {
              "namespace": "_5",
              "members": {
                "create_resource": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/Context",
                      "name": "context"
                    },
                    {
                      "$ref": "#/definitions/_7.ResourceType",
                      "name": "resourceType"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "name": "options"
                    }
                  ],
                  "output": {
                    "type": "object",
                    "value": "[reduce(parameters('options'), createObject('name', _4.create_name(createObject('environment', parameters('context').environment, 'location', _4.to_location_abbreviation(parameters('context').location), 'type', _4.to_resource_abbreviation(parameters('resourceType')), 'project', parameters('context').project), parameters('context').nameConventionTemplate), 'location', parameters('context').location, 'tags', parameters('context').tags, 'properties', createObject()), lambda('obj', 'next', union(lambdaVariables('obj'), lambdaVariables('next'))))]"
                  },
                  "metadata": {
                    "__bicep_imported_from!": {
                      "sourceTemplate": "../../../src/internal/resource.bicep"
                    }
                  }
                }
              }
            }
          ],
          "parameters": {
            "context": {
              "$ref": "#/definitions/Context"
            },
            "logAnalyticsId": {
              "type": "string"
            }
          },
          "variables": {
            "containerRegistryConfig": "[__bicep.container_registry(parameters('context'), createArray())]",
            "containerAppEnvironmentConfig": "[__bicep.container_app_environment(parameters('context'), createArray())]",
            "containerApp1Config": "[__bicep.container_app(__bicep.with_name(parameters('context'), 'app-1'), createArray(__bicep.container(createObject('name', 'container 1', 'image', 'some-container-image')), __bicep.container(createObject('name', 'container 2', 'image', 'some-other-container-image', 'resources', variables('resources_l')))), createArray(__bicep.with_managed_identity(), __bicep.with_environment(resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvironmentConfig').name)), __bicep.with_dapr(parameters('context'), 3000), __bicep.with_auto_scaling(0, 1, createObject('ruleName', createObject('concurrentRequests', '10')))))]",
            "containerApp2Config": "[__bicep.container_app(__bicep.with_name(parameters('context'), 'app-2'), createArray(__bicep.container(createObject('name', 'container-1', 'image', 'some-third-container-image'))), createArray(__bicep.with_managed_identity(), __bicep.with_environment(resourceId('Microsoft.App/managedEnvironments', variables('containerAppEnvironmentConfig').name)), __bicep.with_dapr(parameters('context'), 3000), __bicep.with_traffic_splitting(createObject('by', 'name', 'weights', createObject('rev1', 80, 'rev2', 20))), __bicep.with_auto_scaling(1, 1, createObject('ruleName', createObject('concurrentRequests', '10')))))]",
            "resources_l": {
              "cpu": "1.25",
              "memory": "2.5Gi"
            }
          },
          "resources": {
            "registry": {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-07-01",
              "name": "[variables('containerRegistryConfig').name]",
              "location": "[variables('containerRegistryConfig').location]",
              "tags": "[variables('containerRegistryConfig').tags]",
              "sku": "[variables('containerRegistryConfig').sku]",
              "properties": "[variables('containerRegistryConfig').properties]"
            },
            "environment": {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2024-03-01",
              "name": "[variables('containerAppEnvironmentConfig').name]",
              "location": "[variables('containerAppEnvironmentConfig').location]",
              "tags": "[variables('containerAppEnvironmentConfig').tags]",
              "properties": "[__bicep.__dynamic(variables('containerAppEnvironmentConfig'), createArray(__bicep.with_app_logs(reference(parameters('logAnalyticsId'), '2023-09-01').customerId, 'logAnalytics.listKeys().primarySharedKey')))]"
            },
            "app_1": {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2024-03-01",
              "name": "[variables('containerApp1Config').name]",
              "location": "[variables('containerApp1Config').location]",
              "tags": "[variables('containerApp1Config').tags]",
              "identity": "[variables('containerApp1Config').identity]",
              "properties": "[variables('containerApp1Config').properties]",
              "dependsOn": [
                "environment"
              ]
            },
            "app_2": {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2024-03-01",
              "name": "[variables('containerApp2Config').name]",
              "location": "[variables('containerApp2Config').location]",
              "tags": "[variables('containerApp2Config').tags]",
              "identity": "[variables('containerApp2Config').identity]",
              "properties": "[variables('containerApp2Config').properties]",
              "dependsOn": [
                "environment"
              ]
            }
          }
        }
      },
      "dependsOn": [
        "group",
        "monitoring"
      ]
    }
  }
}